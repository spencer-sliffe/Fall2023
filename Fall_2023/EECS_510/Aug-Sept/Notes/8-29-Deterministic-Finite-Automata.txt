Deterministic Finite Automata-> A deterministic finite Automaton (DFA) is a finite state machine consisting of the following: 
	1. Q a set of states, one of which is the initial or start state, and a subset of which are final or accepting states
	2. SUMNATION, an alphabet of valid input symbols
	3. DELTA a function where: DELTA : Q x SUM -> Q

	Can we build a machine that accepts all and only those strings over the alphabet SUM = {0, 1} that end with the symbol 1?

	Summary:
		Computation is the meaningful manipulation of symbols
		Computations neeed formal languages to describe input and output and operations
		Formal languages are generated using grammers
		Formal languages are recognized.used by finite-state machines called automata
		The theory of computation comprises 3 major classes of formal languages:
			
			Language Class 		Recognized By 		Generated By
			--------------		--------------		---------------
			Regular			Finite Autonama 	Regular Grammar
			Context Free		Pushdown Automata	Context Free Grammar
			Recursively Enumerable	Turing Machine		Unrestricted Grammar

EX:	 Q x SUM = set of all ordered pair (x, y) such that x belongs to Q and y belongs to SUM
	 So if Q has states s0 and s1, and SUM has letters a and b, the cartesian proudct will contain
	 all possible combinations (s0, a), (s0, b), (s1, a), (s1, b)

EX 2:	Transistion table to represent same machine:
	
	State	a	b
	----	-	-
	q0	q0	q1
	+q1	q0	q1
	
	In a transition table, the initial state appears first
	Final states are depicted using the plus sign '+'

	What would this machine look line in code?:

		def ends_withb(s):
			transistions = { ('q0', 'a'): 'q0',
					 ('q0', 'b'): 'q1',
					 ('q1', 'a'): 'q0',
					 ('q1', 'b'): 'q1')
			state = 'q0'
			for c in s:
				state = transistions[(state, c)]
			return 'accepted' if state == 'q1'
				else 'rejected'
		
		#if I actually call this function
		print(ends_with_b ('aabab')) #accepted
		print(ends_with_b ('aaba')) #rejected


EX 3: 	Could we construct a DFA that accepts all strings over the alphabet SUM ={a, b} that end with the substring ab?
		b	     a	
	start->(q0)----a----(q1)----b---->((q2))
			      <---- a<----
		  <------------b-----------

EX 4:	Could we construct a DFA that accepts all strings over the alphabet SUM = {a, b} that contain aba as a substring?

	start->(q0)---a---(q1)---b--->(q2)---a--->((q3))<---\
		  <--------b----------		     \--a/b-/	
